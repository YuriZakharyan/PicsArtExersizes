public class Solution {
    public bool CanFinish(int numCourses, int[][] prerequisites)
    {
        List<int>[] graph = new List<int>[numCourses];
        for (int i = 0; i < numCourses; i++)
        {
            graph[i] = new List<int>();
        }
        foreach (var edge in prerequisites)
        {
            graph[edge[0]].Add(edge[1]);
        }
        
        int[] visit = new int[numCourses];
        for (int i = 0; i < numCourses; i++)
        {
            if (visit[i] == 0)
                if (iscyclic(graph, visit, i)) 
                    return false;
        }
        return true;
    }
    
    public bool iscyclic(List<int>[] graph, int[] visit, int curr)
    {
        if (visit[curr] == 2) 
            return true;      
                              
                              
        visit[curr] = 2; 
        foreach (var node in graph[curr])
        {
            if (visit[node] != 1)
                if (iscyclic(graph, visit, node))
                    return true;
        }
        visit[curr] = 1;
        return false;
    }
}
